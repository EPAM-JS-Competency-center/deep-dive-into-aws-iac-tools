AWSTemplateFormatVersion: 2010-09-09

Description: A CloudFormation template for running an EC2 instance based on AMI Id within a VPC subnet for bastion/ssh host.

Parameters:
  Environment:
    Type: String
    Description: environment name
    AllowedValues:
      - dev
      - production
    Default: dev
    ConstraintDescription: select one of given values
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select your VPC ID to used for creating an instance security group
    ConstraintDescription: Must be a valid VPC Id
  PublicSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: A subnet Id where the instance should be running. A random public subnet within the Default VPC will be chosen by default.
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID
    ConstraintDescription: Must be a valid AMI Id
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select your key pair name
    ConstraintDescription: Must be an existing KeyPair name
  IamInstanceProfile:
    Type: String
    Description: The name of an IAM instance profile.
    Default: ''
  InstanceType:
    Type: String
    Description: An instance type and size
    AllowedValues: [ t1.micro, t2.2xlarge, t2.large, t2.medium, t2.micro, t2.nano, t2.small, t2.xlarge, t3.2xlarge,
                     t3.large, t3.medium, t3.micro, t3.nano, t3.small, t3.xlarge, t3a.2xlarge, t3a.large, t3a.medium,
                     t3a.micro, t3a.nano, t3a.small, t3a.xlarge, t4g.2xlarge, t4g.large, t4g.medium, t4g.micro, t4g.nano ]
    ConstraintDescription: Must be one of given values
    Default: t2.micro
  SSHLocation:
    Type: String
    Description: The IP address range that can be used to SSH to the EC2 instances
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ElastiCacheSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: A valid security group Id for ElastiCache cluster within given VPC
    ConstraintDescription: must be a valid security group id
#  ElasticSearchSecurityGroupId:
#    Type: AWS::EC2::SecurityGroup::Id
#    Description: A valid security group Id for ElasticSearch cluster within given VPC
#    ConstraintDescription: must be a valid security group id
  PostgreSqlSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: A valid security group Id for PostgreSQL RDS instance within given VPC
    ConstraintDescription: must be a valid security group id

Conditions:
  HasIamInstanceProfile: !Not [ !Equals [ !Ref IamInstanceProfile, '' ] ]
#  HasSubnetId: !Not [!Equals [!Ref PublicSubnetId, '']]

Resources:
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allows inbound traffic to 22 port from given location'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SSHLocation

  Ec2Instance:
    Type: AWS::EC2::Instance
    DependsOn: InstanceSG
    Description: EC2 instance for bastion host
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !If [ HasIamInstanceProfile, !Ref IamInstanceProfile, !Ref AWS::NoValue ]
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds:
        - !GetAtt InstanceSG.GroupId
        - !Ref ElastiCacheSecurityGroupId
        - !Ref PostgreSqlSecurityGroupId
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, 'instance' ] ]

Outputs:
  Ec2PublicDnsName:
    Value: !GetAtt [ Ec2Instance, PublicDnsName]
  Ec2PublicIP:
    Value: !GetAtt [ Ec2Instance, PublicIp ]
